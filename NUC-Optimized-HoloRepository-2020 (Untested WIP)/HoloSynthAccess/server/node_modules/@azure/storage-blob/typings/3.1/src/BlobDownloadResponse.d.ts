/// <reference types="node" />
import { HttpResponse } from "@azure/core-http";
import { BlobDownloadResponseModel, BlobType, CopyStatusType, LeaseDurationType, LeaseStateType, LeaseStatusType, BlobDownloadHeaders } from "./generatedModels";
import { Metadata } from "./models";
import { RetriableReadableStreamOptions } from "./utils/RetriableReadableStream";
import { ReadableStreamGetter } from "./utils/RetriableReadableStream";
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * BlobDownloadResponse implements BlobDownloadResponseModel interface, and in Node.js runtime it will
 * automatically retry when internal read stream unexpected ends. (This kind of unexpected ends cannot
 * trigger retries defined in pipeline retry policy.)
 *
 * The {@link readableStreamBody} stream will retry underlayer, you can just use it as a normal Node.js
 * Readable stream.
 *
 * @export
 * @class BlobDownloadResponse
 * @implements {BlobDownloadResponseModel}
 */
export declare class BlobDownloadResponse implements BlobDownloadResponseModel {
    readonly acceptRanges: string | undefined;
    readonly cacheControl: string | undefined;
    readonly contentDisposition: string | undefined;
    readonly contentEncoding: string | undefined;
    readonly contentLanguage: string | undefined;
    readonly blobSequenceNumber: number | undefined;
    readonly blobType: BlobType | undefined;
    readonly contentLength: number | undefined;
    readonly contentMD5: Uint8Array | undefined;
    readonly contentRange: string | undefined;
    readonly contentType: string | undefined;
    readonly copyCompletedOn: Date | undefined;
    readonly copyId: string | undefined;
    readonly copyProgress: string | undefined;
    readonly copySource: string | undefined;
    readonly copyStatus: CopyStatusType | undefined;
    readonly copyStatusDescription: string | undefined;
    readonly leaseDuration: LeaseDurationType | undefined;
    readonly leaseState: LeaseStateType | undefined;
    readonly leaseStatus: LeaseStatusType | undefined;
    readonly date: Date | undefined;
    readonly blobCommittedBlockCount: number | undefined;
    readonly etag: string | undefined;
    readonly errorCode: string | undefined;
    readonly isServerEncrypted: boolean | undefined;
    readonly blobContentMD5: Uint8Array | undefined;
    readonly lastModified: Date | undefined;
    readonly metadata: Metadata | undefined;
    readonly requestId: string | undefined;
    readonly clientRequestId: string | undefined;
    readonly version: string | undefined;
    readonly encryptionKeySha256: string | undefined;
    readonly contentCrc64: Uint8Array | undefined;
    readonly contentAsBlob: Promise<Blob> | undefined;
    readonly readableStreamBody: NodeJS.ReadableStream | undefined;
    readonly _response: HttpResponse & {
        parsedHeaders: BlobDownloadHeaders;
    };
    private originalResponse;
    private blobDownloadStream?;
    /**
     * Creates an instance of BlobDownloadResponse.
     *
     * @param {BlobDownloadResponseModel} originalResponse
     * @param {ReadableStreamGetter} getter
     * @param {number} offset
     * @param {number} count
     * @param {RetriableReadableStreamOptions} [options={}]
     * @memberof BlobDownloadResponse
     */
    constructor(originalResponse: BlobDownloadResponseModel, getter: ReadableStreamGetter, offset: number, count: number, options?: RetriableReadableStreamOptions);
}
//# sourceMappingURL=BlobDownloadResponse.d.ts.map
