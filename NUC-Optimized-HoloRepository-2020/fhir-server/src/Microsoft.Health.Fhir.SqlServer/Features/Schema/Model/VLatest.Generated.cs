//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Health.Fhir.SqlServer.Features.Schema.Model
{
    using Microsoft.Health.SqlServer.Features.Schema.Model;

    internal class VLatest
    {
        internal readonly static ClaimTypeTable ClaimType = new ClaimTypeTable();
        internal readonly static CompartmentAssignmentTable CompartmentAssignment = new CompartmentAssignmentTable();
        internal readonly static CompartmentTypeTable CompartmentType = new CompartmentTypeTable();
        internal readonly static DateTimeSearchParamTable DateTimeSearchParam = new DateTimeSearchParamTable();
        internal readonly static ExportJobTable ExportJob = new ExportJobTable();
        internal readonly static NumberSearchParamTable NumberSearchParam = new NumberSearchParamTable();
        internal readonly static QuantityCodeTable QuantityCode = new QuantityCodeTable();
        internal readonly static QuantitySearchParamTable QuantitySearchParam = new QuantitySearchParamTable();
        internal readonly static ReferenceSearchParamTable ReferenceSearchParam = new ReferenceSearchParamTable();
        internal readonly static ReferenceTokenCompositeSearchParamTable ReferenceTokenCompositeSearchParam = new ReferenceTokenCompositeSearchParamTable();
        internal readonly static ResourceTable Resource = new ResourceTable();
        internal readonly static ResourceTypeTable ResourceType = new ResourceTypeTable();
        internal readonly static ResourceWriteClaimTable ResourceWriteClaim = new ResourceWriteClaimTable();
        internal readonly static SchemaVersionTable SchemaVersion = new SchemaVersionTable();
        internal readonly static SearchParamTable SearchParam = new SearchParamTable();
        internal readonly static StringSearchParamTable StringSearchParam = new StringSearchParamTable();
        internal readonly static SystemTable System = new SystemTable();
        internal readonly static TokenDateTimeCompositeSearchParamTable TokenDateTimeCompositeSearchParam = new TokenDateTimeCompositeSearchParamTable();
        internal readonly static TokenNumberNumberCompositeSearchParamTable TokenNumberNumberCompositeSearchParam = new TokenNumberNumberCompositeSearchParamTable();
        internal readonly static TokenQuantityCompositeSearchParamTable TokenQuantityCompositeSearchParam = new TokenQuantityCompositeSearchParamTable();
        internal readonly static TokenSearchParamTable TokenSearchParam = new TokenSearchParamTable();
        internal readonly static TokenStringCompositeSearchParamTable TokenStringCompositeSearchParam = new TokenStringCompositeSearchParamTable();
        internal readonly static TokenTextTable TokenText = new TokenTextTable();
        internal readonly static TokenTokenCompositeSearchParamTable TokenTokenCompositeSearchParam = new TokenTokenCompositeSearchParamTable();
        internal readonly static UriSearchParamTable UriSearchParam = new UriSearchParamTable();
        internal readonly static AcquireExportJobsProcedure AcquireExportJobs = new AcquireExportJobsProcedure();
        internal readonly static CreateExportJobProcedure CreateExportJob = new CreateExportJobProcedure();
        internal readonly static GetExportJobByHashProcedure GetExportJobByHash = new GetExportJobByHashProcedure();
        internal readonly static GetExportJobByIdProcedure GetExportJobById = new GetExportJobByIdProcedure();
        internal readonly static HardDeleteResourceProcedure HardDeleteResource = new HardDeleteResourceProcedure();
        internal readonly static ReadResourceProcedure ReadResource = new ReadResourceProcedure();
        internal readonly static SelectCurrentSchemaVersionProcedure SelectCurrentSchemaVersion = new SelectCurrentSchemaVersionProcedure();
        internal readonly static UpdateExportJobProcedure UpdateExportJob = new UpdateExportJobProcedure();
        internal readonly static UpsertResourceProcedure UpsertResource = new UpsertResourceProcedure();
        internal readonly static UpsertSchemaVersionProcedure UpsertSchemaVersion = new UpsertSchemaVersionProcedure();
        internal class ClaimTypeTable : Table
        {
            internal ClaimTypeTable(): base("dbo.ClaimType")
            {
            }

            internal readonly TinyIntColumn ClaimTypeId = new TinyIntColumn("ClaimTypeId");
            internal readonly VarCharColumn Name = new VarCharColumn("Name", 128, "Latin1_General_100_CS_AS");
        }

        internal class CompartmentAssignmentTable : Table
        {
            internal CompartmentAssignmentTable(): base("dbo.CompartmentAssignment")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly TinyIntColumn CompartmentTypeId = new TinyIntColumn("CompartmentTypeId");
            internal readonly VarCharColumn ReferenceResourceId = new VarCharColumn("ReferenceResourceId", 64, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class CompartmentTypeTable : Table
        {
            internal CompartmentTypeTable(): base("dbo.CompartmentType")
            {
            }

            internal readonly TinyIntColumn CompartmentTypeId = new TinyIntColumn("CompartmentTypeId");
            internal readonly VarCharColumn Name = new VarCharColumn("Name", 128, "Latin1_General_100_CS_AS");
        }

        internal class DateTimeSearchParamTable : Table
        {
            internal DateTimeSearchParamTable(): base("dbo.DateTimeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly DateTime2Column StartDateTime = new DateTime2Column("StartDateTime", 7);
            internal readonly DateTime2Column EndDateTime = new DateTime2Column("EndDateTime", 7);
            internal readonly BitColumn IsLongerThanADay = new BitColumn("IsLongerThanADay");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class ExportJobTable : Table
        {
            internal ExportJobTable(): base("dbo.ExportJob")
            {
            }

            internal readonly VarCharColumn Id = new VarCharColumn("Id", 64, "Latin1_General_100_CS_AS");
            internal readonly VarCharColumn Hash = new VarCharColumn("Hash", 64, "Latin1_General_100_CS_AS");
            internal readonly VarCharColumn Status = new VarCharColumn("Status", 10);
            internal readonly NullableDateTime2Column HeartbeatDateTime = new NullableDateTime2Column("HeartbeatDateTime", 7);
            internal readonly VarCharColumn RawJobRecord = new VarCharColumn("RawJobRecord", -1);
            internal readonly TimestampColumn JobVersion = new TimestampColumn("JobVersion");
        }

        internal class NumberSearchParamTable : Table
        {
            internal NumberSearchParamTable(): base("dbo.NumberSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableDecimalColumn SingleValue = new NullableDecimalColumn("SingleValue", 18, 6);
            internal readonly NullableDecimalColumn LowValue = new NullableDecimalColumn("LowValue", 18, 6);
            internal readonly NullableDecimalColumn HighValue = new NullableDecimalColumn("HighValue", 18, 6);
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class QuantityCodeTable : Table
        {
            internal QuantityCodeTable(): base("dbo.QuantityCode")
            {
            }

            internal readonly IntColumn QuantityCodeId = new IntColumn("QuantityCodeId");
            internal readonly NVarCharColumn Value = new NVarCharColumn("Value", 256, "Latin1_General_100_CS_AS");
        }

        internal class QuantitySearchParamTable : Table
        {
            internal QuantitySearchParamTable(): base("dbo.QuantitySearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId = new NullableIntColumn("SystemId");
            internal readonly NullableIntColumn QuantityCodeId = new NullableIntColumn("QuantityCodeId");
            internal readonly NullableDecimalColumn SingleValue = new NullableDecimalColumn("SingleValue", 18, 6);
            internal readonly NullableDecimalColumn LowValue = new NullableDecimalColumn("LowValue", 18, 6);
            internal readonly NullableDecimalColumn HighValue = new NullableDecimalColumn("HighValue", 18, 6);
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class ReferenceSearchParamTable : Table
        {
            internal ReferenceSearchParamTable(): base("dbo.ReferenceSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableVarCharColumn BaseUri = new NullableVarCharColumn("BaseUri", 128, "Latin1_General_100_CS_AS");
            internal readonly SmallIntColumn ReferenceResourceTypeId = new SmallIntColumn("ReferenceResourceTypeId");
            internal readonly VarCharColumn ReferenceResourceId = new VarCharColumn("ReferenceResourceId", 64, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn ReferenceResourceVersion = new NullableIntColumn("ReferenceResourceVersion");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class ReferenceTokenCompositeSearchParamTable : Table
        {
            internal ReferenceTokenCompositeSearchParamTable(): base("dbo.ReferenceTokenCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableVarCharColumn BaseUri1 = new NullableVarCharColumn("BaseUri1", 128, "Latin1_General_100_CS_AS");
            internal readonly SmallIntColumn ReferenceResourceTypeId1 = new SmallIntColumn("ReferenceResourceTypeId1");
            internal readonly VarCharColumn ReferenceResourceId1 = new VarCharColumn("ReferenceResourceId1", 64, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn ReferenceResourceVersion1 = new NullableIntColumn("ReferenceResourceVersion1");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly VarCharColumn Code2 = new VarCharColumn("Code2", 128, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class ResourceTable : Table
        {
            internal ResourceTable(): base("dbo.Resource")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly VarCharColumn ResourceId = new VarCharColumn("ResourceId", 64, "Latin1_General_100_CS_AS");
            internal readonly IntColumn Version = new IntColumn("Version");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly BitColumn IsDeleted = new BitColumn("IsDeleted");
            internal readonly NullableVarCharColumn RequestMethod = new NullableVarCharColumn("RequestMethod", 10);
            internal readonly VarBinaryColumn RawResource = new VarBinaryColumn("RawResource", -1);
        }

        internal class ResourceTypeTable : Table
        {
            internal ResourceTypeTable(): base("dbo.ResourceType")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly NVarCharColumn Name = new NVarCharColumn("Name", 50, "Latin1_General_100_CS_AS");
        }

        internal class ResourceWriteClaimTable : Table
        {
            internal ResourceWriteClaimTable(): base("dbo.ResourceWriteClaim")
            {
            }

            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly TinyIntColumn ClaimTypeId = new TinyIntColumn("ClaimTypeId");
            internal readonly NVarCharColumn ClaimValue = new NVarCharColumn("ClaimValue", 128);
        }

        internal class SchemaVersionTable : Table
        {
            internal SchemaVersionTable(): base("dbo.SchemaVersion")
            {
            }

            internal readonly IntColumn Version = new IntColumn("Version");
            internal readonly VarCharColumn Status = new VarCharColumn("Status", 10);
        }

        internal class SearchParamTable : Table
        {
            internal SearchParamTable(): base("dbo.SearchParam")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly VarCharColumn Uri = new VarCharColumn("Uri", 128, "Latin1_General_100_CS_AS");
        }

        internal class StringSearchParamTable : Table
        {
            internal StringSearchParamTable(): base("dbo.StringSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NVarCharColumn Text = new NVarCharColumn("Text", 256, "Latin1_General_100_CI_AI_SC");
            internal readonly NullableNVarCharColumn TextOverflow = new NullableNVarCharColumn("TextOverflow", -1, "Latin1_General_100_CI_AI_SC");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class SystemTable : Table
        {
            internal SystemTable(): base("dbo.System")
            {
            }

            internal readonly IntColumn SystemId = new IntColumn("SystemId");
            internal readonly NVarCharColumn Value = new NVarCharColumn("Value", 256);
        }

        internal class TokenDateTimeCompositeSearchParamTable : Table
        {
            internal TokenDateTimeCompositeSearchParamTable(): base("dbo.TokenDateTimeCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly DateTime2Column StartDateTime2 = new DateTime2Column("StartDateTime2", 7);
            internal readonly DateTime2Column EndDateTime2 = new DateTime2Column("EndDateTime2", 7);
            internal readonly BitColumn IsLongerThanADay2 = new BitColumn("IsLongerThanADay2");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class TokenNumberNumberCompositeSearchParamTable : Table
        {
            internal TokenNumberNumberCompositeSearchParamTable(): base("dbo.TokenNumberNumberCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableDecimalColumn SingleValue2 = new NullableDecimalColumn("SingleValue2", 18, 6);
            internal readonly NullableDecimalColumn LowValue2 = new NullableDecimalColumn("LowValue2", 18, 6);
            internal readonly NullableDecimalColumn HighValue2 = new NullableDecimalColumn("HighValue2", 18, 6);
            internal readonly NullableDecimalColumn SingleValue3 = new NullableDecimalColumn("SingleValue3", 18, 6);
            internal readonly NullableDecimalColumn LowValue3 = new NullableDecimalColumn("LowValue3", 18, 6);
            internal readonly NullableDecimalColumn HighValue3 = new NullableDecimalColumn("HighValue3", 18, 6);
            internal readonly BitColumn HasRange = new BitColumn("HasRange");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class TokenQuantityCompositeSearchParamTable : Table
        {
            internal TokenQuantityCompositeSearchParamTable(): base("dbo.TokenQuantityCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly NullableIntColumn QuantityCodeId2 = new NullableIntColumn("QuantityCodeId2");
            internal readonly NullableDecimalColumn SingleValue2 = new NullableDecimalColumn("SingleValue2", 18, 6);
            internal readonly NullableDecimalColumn LowValue2 = new NullableDecimalColumn("LowValue2", 18, 6);
            internal readonly NullableDecimalColumn HighValue2 = new NullableDecimalColumn("HighValue2", 18, 6);
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class TokenSearchParamTable : Table
        {
            internal TokenSearchParamTable(): base("dbo.TokenSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId = new NullableIntColumn("SystemId");
            internal readonly VarCharColumn Code = new VarCharColumn("Code", 128, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class TokenStringCompositeSearchParamTable : Table
        {
            internal TokenStringCompositeSearchParamTable(): base("dbo.TokenStringCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly NVarCharColumn Text2 = new NVarCharColumn("Text2", 256, "Latin1_General_CI_AI");
            internal readonly NullableNVarCharColumn TextOverflow2 = new NullableNVarCharColumn("TextOverflow2", -1, "Latin1_General_CI_AI");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class TokenTextTable : Table
        {
            internal TokenTextTable(): base("dbo.TokenText")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NVarCharColumn Text = new NVarCharColumn("Text", 400, "Latin1_General_CI_AI");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class TokenTokenCompositeSearchParamTable : Table
        {
            internal TokenTokenCompositeSearchParamTable(): base("dbo.TokenTokenCompositeSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly VarCharColumn Code2 = new VarCharColumn("Code2", 128, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class UriSearchParamTable : Table
        {
            internal UriSearchParamTable(): base("dbo.UriSearchParam")
            {
            }

            internal readonly SmallIntColumn ResourceTypeId = new SmallIntColumn("ResourceTypeId");
            internal readonly BigIntColumn ResourceSurrogateId = new BigIntColumn("ResourceSurrogateId");
            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly VarCharColumn Uri = new VarCharColumn("Uri", 256, "Latin1_General_100_CS_AS");
            internal readonly BitColumn IsHistory = new BitColumn("IsHistory");
        }

        internal class AcquireExportJobsProcedure : StoredProcedure
        {
            internal AcquireExportJobsProcedure(): base("dbo.AcquireExportJobs")
            {
            }

            private readonly ParameterDefinition<System.Int64> _jobHeartbeatTimeoutThresholdInSeconds = new ParameterDefinition<System.Int64>("@jobHeartbeatTimeoutThresholdInSeconds", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int32> _maximumNumberOfConcurrentJobsAllowed = new ParameterDefinition<System.Int32>("@maximumNumberOfConcurrentJobsAllowed", global::System.Data.SqlDbType.Int, false);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.Int64 jobHeartbeatTimeoutThresholdInSeconds, System.Int32 maximumNumberOfConcurrentJobsAllowed)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.AcquireExportJobs";
                _jobHeartbeatTimeoutThresholdInSeconds.AddParameter(command.Parameters, jobHeartbeatTimeoutThresholdInSeconds);
                _maximumNumberOfConcurrentJobsAllowed.AddParameter(command.Parameters, maximumNumberOfConcurrentJobsAllowed);
            }
        }

        internal class CreateExportJobProcedure : StoredProcedure
        {
            internal CreateExportJobProcedure(): base("dbo.CreateExportJob")
            {
            }

            private readonly ParameterDefinition<System.String> _id = new ParameterDefinition<System.String>("@id", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.String> _hash = new ParameterDefinition<System.String>("@hash", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.String> _status = new ParameterDefinition<System.String>("@status", global::System.Data.SqlDbType.VarChar, false, 10);
            private readonly ParameterDefinition<System.String> _rawJobRecord = new ParameterDefinition<System.String>("@rawJobRecord", global::System.Data.SqlDbType.VarChar, false, -1);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.String id, System.String hash, System.String status, System.String rawJobRecord)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.CreateExportJob";
                _id.AddParameter(command.Parameters, id);
                _hash.AddParameter(command.Parameters, hash);
                _status.AddParameter(command.Parameters, status);
                _rawJobRecord.AddParameter(command.Parameters, rawJobRecord);
            }
        }

        internal class GetExportJobByHashProcedure : StoredProcedure
        {
            internal GetExportJobByHashProcedure(): base("dbo.GetExportJobByHash")
            {
            }

            private readonly ParameterDefinition<System.String> _hash = new ParameterDefinition<System.String>("@hash", global::System.Data.SqlDbType.VarChar, false, 64);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.String hash)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetExportJobByHash";
                _hash.AddParameter(command.Parameters, hash);
            }
        }

        internal class GetExportJobByIdProcedure : StoredProcedure
        {
            internal GetExportJobByIdProcedure(): base("dbo.GetExportJobById")
            {
            }

            private readonly ParameterDefinition<System.String> _id = new ParameterDefinition<System.String>("@id", global::System.Data.SqlDbType.VarChar, false, 64);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.String id)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.GetExportJobById";
                _id.AddParameter(command.Parameters, id);
            }
        }

        internal class HardDeleteResourceProcedure : StoredProcedure
        {
            internal HardDeleteResourceProcedure(): base("dbo.HardDeleteResource")
            {
            }

            private readonly ParameterDefinition<System.Int16> _resourceTypeId = new ParameterDefinition<System.Int16>("@resourceTypeId", global::System.Data.SqlDbType.SmallInt, false);
            private readonly ParameterDefinition<System.String> _resourceId = new ParameterDefinition<System.String>("@resourceId", global::System.Data.SqlDbType.VarChar, false, 64);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.Int16 resourceTypeId, System.String resourceId)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.HardDeleteResource";
                _resourceTypeId.AddParameter(command.Parameters, resourceTypeId);
                _resourceId.AddParameter(command.Parameters, resourceId);
            }
        }

        internal class ReadResourceProcedure : StoredProcedure
        {
            internal ReadResourceProcedure(): base("dbo.ReadResource")
            {
            }

            private readonly ParameterDefinition<System.Int16> _resourceTypeId = new ParameterDefinition<System.Int16>("@resourceTypeId", global::System.Data.SqlDbType.SmallInt, false);
            private readonly ParameterDefinition<System.String> _resourceId = new ParameterDefinition<System.String>("@resourceId", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.Nullable<System.Int32>> _version = new ParameterDefinition<System.Nullable<System.Int32>>("@version", global::System.Data.SqlDbType.Int, true);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.Int16 resourceTypeId, System.String resourceId, System.Nullable<System.Int32> version)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.ReadResource";
                _resourceTypeId.AddParameter(command.Parameters, resourceTypeId);
                _resourceId.AddParameter(command.Parameters, resourceId);
                _version.AddParameter(command.Parameters, version);
            }
        }

        internal class SelectCurrentSchemaVersionProcedure : StoredProcedure
        {
            internal SelectCurrentSchemaVersionProcedure(): base("dbo.SelectCurrentSchemaVersion")
            {
            }

            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.SelectCurrentSchemaVersion";
            }
        }

        internal class UpdateExportJobProcedure : StoredProcedure
        {
            internal UpdateExportJobProcedure(): base("dbo.UpdateExportJob")
            {
            }

            private readonly ParameterDefinition<System.String> _id = new ParameterDefinition<System.String>("@id", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.String> _status = new ParameterDefinition<System.String>("@status", global::System.Data.SqlDbType.VarChar, false, 10);
            private readonly ParameterDefinition<System.String> _rawJobRecord = new ParameterDefinition<System.String>("@rawJobRecord", global::System.Data.SqlDbType.VarChar, false, -1);
            private readonly ParameterDefinition<System.Byte[]> _jobVersion = new ParameterDefinition<System.Byte[]>("@jobVersion", global::System.Data.SqlDbType.Binary, false, 8);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.String id, System.String status, System.String rawJobRecord, System.Byte[] jobVersion)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.UpdateExportJob";
                _id.AddParameter(command.Parameters, id);
                _status.AddParameter(command.Parameters, status);
                _rawJobRecord.AddParameter(command.Parameters, rawJobRecord);
                _jobVersion.AddParameter(command.Parameters, jobVersion);
            }
        }

        internal class UpsertResourceProcedure : StoredProcedure
        {
            internal UpsertResourceProcedure(): base("dbo.UpsertResource")
            {
            }

            private readonly ParameterDefinition<System.Int64> _baseResourceSurrogateId = new ParameterDefinition<System.Int64>("@baseResourceSurrogateId", global::System.Data.SqlDbType.BigInt, false);
            private readonly ParameterDefinition<System.Int16> _resourceTypeId = new ParameterDefinition<System.Int16>("@resourceTypeId", global::System.Data.SqlDbType.SmallInt, false);
            private readonly ParameterDefinition<System.String> _resourceId = new ParameterDefinition<System.String>("@resourceId", global::System.Data.SqlDbType.VarChar, false, 64);
            private readonly ParameterDefinition<System.Nullable<System.Int32>> _eTag = new ParameterDefinition<System.Nullable<System.Int32>>("@eTag", global::System.Data.SqlDbType.Int, true);
            private readonly ParameterDefinition<System.Boolean> _allowCreate = new ParameterDefinition<System.Boolean>("@allowCreate", global::System.Data.SqlDbType.Bit, false);
            private readonly ParameterDefinition<System.Boolean> _isDeleted = new ParameterDefinition<System.Boolean>("@isDeleted", global::System.Data.SqlDbType.Bit, false);
            private readonly ParameterDefinition<System.Boolean> _keepHistory = new ParameterDefinition<System.Boolean>("@keepHistory", global::System.Data.SqlDbType.Bit, false);
            private readonly ParameterDefinition<System.String> _requestMethod = new ParameterDefinition<System.String>("@requestMethod", global::System.Data.SqlDbType.VarChar, false, 10);
            private readonly ParameterDefinition<global::System.IO.Stream> _rawResource = new ParameterDefinition<global::System.IO.Stream>("@rawResource", global::System.Data.SqlDbType.VarBinary, false, -1);
            private readonly ResourceWriteClaimTableTypeTableValuedParameterDefinition _resourceWriteClaims = new ResourceWriteClaimTableTypeTableValuedParameterDefinition("@resourceWriteClaims");
            private readonly CompartmentAssignmentTableTypeTableValuedParameterDefinition _compartmentAssignments = new CompartmentAssignmentTableTypeTableValuedParameterDefinition("@compartmentAssignments");
            private readonly ReferenceSearchParamTableTypeTableValuedParameterDefinition _referenceSearchParams = new ReferenceSearchParamTableTypeTableValuedParameterDefinition("@referenceSearchParams");
            private readonly TokenSearchParamTableTypeTableValuedParameterDefinition _tokenSearchParams = new TokenSearchParamTableTypeTableValuedParameterDefinition("@tokenSearchParams");
            private readonly TokenTextTableTypeTableValuedParameterDefinition _tokenTextSearchParams = new TokenTextTableTypeTableValuedParameterDefinition("@tokenTextSearchParams");
            private readonly StringSearchParamTableTypeTableValuedParameterDefinition _stringSearchParams = new StringSearchParamTableTypeTableValuedParameterDefinition("@stringSearchParams");
            private readonly NumberSearchParamTableTypeTableValuedParameterDefinition _numberSearchParams = new NumberSearchParamTableTypeTableValuedParameterDefinition("@numberSearchParams");
            private readonly QuantitySearchParamTableTypeTableValuedParameterDefinition _quantitySearchParams = new QuantitySearchParamTableTypeTableValuedParameterDefinition("@quantitySearchParams");
            private readonly UriSearchParamTableTypeTableValuedParameterDefinition _uriSearchParams = new UriSearchParamTableTypeTableValuedParameterDefinition("@uriSearchParams");
            private readonly DateTimeSearchParamTableTypeTableValuedParameterDefinition _dateTimeSearchParms = new DateTimeSearchParamTableTypeTableValuedParameterDefinition("@dateTimeSearchParms");
            private readonly ReferenceTokenCompositeSearchParamTableTypeTableValuedParameterDefinition _referenceTokenCompositeSearchParams = new ReferenceTokenCompositeSearchParamTableTypeTableValuedParameterDefinition("@referenceTokenCompositeSearchParams");
            private readonly TokenTokenCompositeSearchParamTableTypeTableValuedParameterDefinition _tokenTokenCompositeSearchParams = new TokenTokenCompositeSearchParamTableTypeTableValuedParameterDefinition("@tokenTokenCompositeSearchParams");
            private readonly TokenDateTimeCompositeSearchParamTableTypeTableValuedParameterDefinition _tokenDateTimeCompositeSearchParams = new TokenDateTimeCompositeSearchParamTableTypeTableValuedParameterDefinition("@tokenDateTimeCompositeSearchParams");
            private readonly TokenQuantityCompositeSearchParamTableTypeTableValuedParameterDefinition _tokenQuantityCompositeSearchParams = new TokenQuantityCompositeSearchParamTableTypeTableValuedParameterDefinition("@tokenQuantityCompositeSearchParams");
            private readonly TokenStringCompositeSearchParamTableTypeTableValuedParameterDefinition _tokenStringCompositeSearchParams = new TokenStringCompositeSearchParamTableTypeTableValuedParameterDefinition("@tokenStringCompositeSearchParams");
            private readonly TokenNumberNumberCompositeSearchParamTableTypeTableValuedParameterDefinition _tokenNumberNumberCompositeSearchParams = new TokenNumberNumberCompositeSearchParamTableTypeTableValuedParameterDefinition("@tokenNumberNumberCompositeSearchParams");
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.Int64 baseResourceSurrogateId, System.Int16 resourceTypeId, System.String resourceId, System.Nullable<System.Int32> eTag, System.Boolean allowCreate, System.Boolean isDeleted, System.Boolean keepHistory, System.String requestMethod, global::System.IO.Stream rawResource, global::System.Collections.Generic.IEnumerable<ResourceWriteClaimTableTypeRow> resourceWriteClaims, global::System.Collections.Generic.IEnumerable<CompartmentAssignmentTableTypeRow> compartmentAssignments, global::System.Collections.Generic.IEnumerable<ReferenceSearchParamTableTypeRow> referenceSearchParams, global::System.Collections.Generic.IEnumerable<TokenSearchParamTableTypeRow> tokenSearchParams, global::System.Collections.Generic.IEnumerable<TokenTextTableTypeRow> tokenTextSearchParams, global::System.Collections.Generic.IEnumerable<StringSearchParamTableTypeRow> stringSearchParams, global::System.Collections.Generic.IEnumerable<NumberSearchParamTableTypeRow> numberSearchParams, global::System.Collections.Generic.IEnumerable<QuantitySearchParamTableTypeRow> quantitySearchParams, global::System.Collections.Generic.IEnumerable<UriSearchParamTableTypeRow> uriSearchParams, global::System.Collections.Generic.IEnumerable<DateTimeSearchParamTableTypeRow> dateTimeSearchParms, global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamTableTypeRow> referenceTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamTableTypeRow> tokenTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamTableTypeRow> tokenDateTimeCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamTableTypeRow> tokenQuantityCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamTableTypeRow> tokenStringCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamTableTypeRow> tokenNumberNumberCompositeSearchParams)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.UpsertResource";
                _baseResourceSurrogateId.AddParameter(command.Parameters, baseResourceSurrogateId);
                _resourceTypeId.AddParameter(command.Parameters, resourceTypeId);
                _resourceId.AddParameter(command.Parameters, resourceId);
                _eTag.AddParameter(command.Parameters, eTag);
                _allowCreate.AddParameter(command.Parameters, allowCreate);
                _isDeleted.AddParameter(command.Parameters, isDeleted);
                _keepHistory.AddParameter(command.Parameters, keepHistory);
                _requestMethod.AddParameter(command.Parameters, requestMethod);
                _rawResource.AddParameter(command.Parameters, rawResource);
                _resourceWriteClaims.AddParameter(command.Parameters, resourceWriteClaims);
                _compartmentAssignments.AddParameter(command.Parameters, compartmentAssignments);
                _referenceSearchParams.AddParameter(command.Parameters, referenceSearchParams);
                _tokenSearchParams.AddParameter(command.Parameters, tokenSearchParams);
                _tokenTextSearchParams.AddParameter(command.Parameters, tokenTextSearchParams);
                _stringSearchParams.AddParameter(command.Parameters, stringSearchParams);
                _numberSearchParams.AddParameter(command.Parameters, numberSearchParams);
                _quantitySearchParams.AddParameter(command.Parameters, quantitySearchParams);
                _uriSearchParams.AddParameter(command.Parameters, uriSearchParams);
                _dateTimeSearchParms.AddParameter(command.Parameters, dateTimeSearchParms);
                _referenceTokenCompositeSearchParams.AddParameter(command.Parameters, referenceTokenCompositeSearchParams);
                _tokenTokenCompositeSearchParams.AddParameter(command.Parameters, tokenTokenCompositeSearchParams);
                _tokenDateTimeCompositeSearchParams.AddParameter(command.Parameters, tokenDateTimeCompositeSearchParams);
                _tokenQuantityCompositeSearchParams.AddParameter(command.Parameters, tokenQuantityCompositeSearchParams);
                _tokenStringCompositeSearchParams.AddParameter(command.Parameters, tokenStringCompositeSearchParams);
                _tokenNumberNumberCompositeSearchParams.AddParameter(command.Parameters, tokenNumberNumberCompositeSearchParams);
            }

            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.Int64 baseResourceSurrogateId, System.Int16 resourceTypeId, System.String resourceId, System.Nullable<System.Int32> eTag, System.Boolean allowCreate, System.Boolean isDeleted, System.Boolean keepHistory, System.String requestMethod, global::System.IO.Stream rawResource, UpsertResourceTableValuedParameters tableValuedParameters)
            {
                PopulateCommand(command, baseResourceSurrogateId: baseResourceSurrogateId, resourceTypeId: resourceTypeId, resourceId: resourceId, eTag: eTag, allowCreate: allowCreate, isDeleted: isDeleted, keepHistory: keepHistory, requestMethod: requestMethod, rawResource: rawResource, resourceWriteClaims: tableValuedParameters.ResourceWriteClaims, compartmentAssignments: tableValuedParameters.CompartmentAssignments, referenceSearchParams: tableValuedParameters.ReferenceSearchParams, tokenSearchParams: tableValuedParameters.TokenSearchParams, tokenTextSearchParams: tableValuedParameters.TokenTextSearchParams, stringSearchParams: tableValuedParameters.StringSearchParams, numberSearchParams: tableValuedParameters.NumberSearchParams, quantitySearchParams: tableValuedParameters.QuantitySearchParams, uriSearchParams: tableValuedParameters.UriSearchParams, dateTimeSearchParms: tableValuedParameters.DateTimeSearchParms, referenceTokenCompositeSearchParams: tableValuedParameters.ReferenceTokenCompositeSearchParams, tokenTokenCompositeSearchParams: tableValuedParameters.TokenTokenCompositeSearchParams, tokenDateTimeCompositeSearchParams: tableValuedParameters.TokenDateTimeCompositeSearchParams, tokenQuantityCompositeSearchParams: tableValuedParameters.TokenQuantityCompositeSearchParams, tokenStringCompositeSearchParams: tableValuedParameters.TokenStringCompositeSearchParams, tokenNumberNumberCompositeSearchParams: tableValuedParameters.TokenNumberNumberCompositeSearchParams);
            }
        }

        internal class UpsertResourceTvpGenerator<TInput> : IStoredProcedureTableValuedParametersGenerator<TInput, UpsertResourceTableValuedParameters>
        {
            public UpsertResourceTvpGenerator(ITableValuedParameterRowGenerator<TInput, ResourceWriteClaimTableTypeRow> ResourceWriteClaimTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, CompartmentAssignmentTableTypeRow> CompartmentAssignmentTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, ReferenceSearchParamTableTypeRow> ReferenceSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenSearchParamTableTypeRow> TokenSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenTextTableTypeRow> TokenTextTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, StringSearchParamTableTypeRow> StringSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, NumberSearchParamTableTypeRow> NumberSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, QuantitySearchParamTableTypeRow> QuantitySearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, UriSearchParamTableTypeRow> UriSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, DateTimeSearchParamTableTypeRow> DateTimeSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, ReferenceTokenCompositeSearchParamTableTypeRow> ReferenceTokenCompositeSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenTokenCompositeSearchParamTableTypeRow> TokenTokenCompositeSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenDateTimeCompositeSearchParamTableTypeRow> TokenDateTimeCompositeSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenQuantityCompositeSearchParamTableTypeRow> TokenQuantityCompositeSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenStringCompositeSearchParamTableTypeRow> TokenStringCompositeSearchParamTableTypeRowGenerator, ITableValuedParameterRowGenerator<TInput, TokenNumberNumberCompositeSearchParamTableTypeRow> TokenNumberNumberCompositeSearchParamTableTypeRowGenerator)
            {
                this.ResourceWriteClaimTableTypeRowGenerator = ResourceWriteClaimTableTypeRowGenerator;
                this.CompartmentAssignmentTableTypeRowGenerator = CompartmentAssignmentTableTypeRowGenerator;
                this.ReferenceSearchParamTableTypeRowGenerator = ReferenceSearchParamTableTypeRowGenerator;
                this.TokenSearchParamTableTypeRowGenerator = TokenSearchParamTableTypeRowGenerator;
                this.TokenTextTableTypeRowGenerator = TokenTextTableTypeRowGenerator;
                this.StringSearchParamTableTypeRowGenerator = StringSearchParamTableTypeRowGenerator;
                this.NumberSearchParamTableTypeRowGenerator = NumberSearchParamTableTypeRowGenerator;
                this.QuantitySearchParamTableTypeRowGenerator = QuantitySearchParamTableTypeRowGenerator;
                this.UriSearchParamTableTypeRowGenerator = UriSearchParamTableTypeRowGenerator;
                this.DateTimeSearchParamTableTypeRowGenerator = DateTimeSearchParamTableTypeRowGenerator;
                this.ReferenceTokenCompositeSearchParamTableTypeRowGenerator = ReferenceTokenCompositeSearchParamTableTypeRowGenerator;
                this.TokenTokenCompositeSearchParamTableTypeRowGenerator = TokenTokenCompositeSearchParamTableTypeRowGenerator;
                this.TokenDateTimeCompositeSearchParamTableTypeRowGenerator = TokenDateTimeCompositeSearchParamTableTypeRowGenerator;
                this.TokenQuantityCompositeSearchParamTableTypeRowGenerator = TokenQuantityCompositeSearchParamTableTypeRowGenerator;
                this.TokenStringCompositeSearchParamTableTypeRowGenerator = TokenStringCompositeSearchParamTableTypeRowGenerator;
                this.TokenNumberNumberCompositeSearchParamTableTypeRowGenerator = TokenNumberNumberCompositeSearchParamTableTypeRowGenerator;
            }

            private readonly ITableValuedParameterRowGenerator<TInput, ResourceWriteClaimTableTypeRow> ResourceWriteClaimTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, CompartmentAssignmentTableTypeRow> CompartmentAssignmentTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, ReferenceSearchParamTableTypeRow> ReferenceSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenSearchParamTableTypeRow> TokenSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenTextTableTypeRow> TokenTextTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, StringSearchParamTableTypeRow> StringSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, NumberSearchParamTableTypeRow> NumberSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, QuantitySearchParamTableTypeRow> QuantitySearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, UriSearchParamTableTypeRow> UriSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, DateTimeSearchParamTableTypeRow> DateTimeSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, ReferenceTokenCompositeSearchParamTableTypeRow> ReferenceTokenCompositeSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenTokenCompositeSearchParamTableTypeRow> TokenTokenCompositeSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenDateTimeCompositeSearchParamTableTypeRow> TokenDateTimeCompositeSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenQuantityCompositeSearchParamTableTypeRow> TokenQuantityCompositeSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenStringCompositeSearchParamTableTypeRow> TokenStringCompositeSearchParamTableTypeRowGenerator;
            private readonly ITableValuedParameterRowGenerator<TInput, TokenNumberNumberCompositeSearchParamTableTypeRow> TokenNumberNumberCompositeSearchParamTableTypeRowGenerator;
            public UpsertResourceTableValuedParameters Generate(TInput input)
            {
                return new UpsertResourceTableValuedParameters(ResourceWriteClaimTableTypeRowGenerator.GenerateRows(input), CompartmentAssignmentTableTypeRowGenerator.GenerateRows(input), ReferenceSearchParamTableTypeRowGenerator.GenerateRows(input), TokenSearchParamTableTypeRowGenerator.GenerateRows(input), TokenTextTableTypeRowGenerator.GenerateRows(input), StringSearchParamTableTypeRowGenerator.GenerateRows(input), NumberSearchParamTableTypeRowGenerator.GenerateRows(input), QuantitySearchParamTableTypeRowGenerator.GenerateRows(input), UriSearchParamTableTypeRowGenerator.GenerateRows(input), DateTimeSearchParamTableTypeRowGenerator.GenerateRows(input), ReferenceTokenCompositeSearchParamTableTypeRowGenerator.GenerateRows(input), TokenTokenCompositeSearchParamTableTypeRowGenerator.GenerateRows(input), TokenDateTimeCompositeSearchParamTableTypeRowGenerator.GenerateRows(input), TokenQuantityCompositeSearchParamTableTypeRowGenerator.GenerateRows(input), TokenStringCompositeSearchParamTableTypeRowGenerator.GenerateRows(input), TokenNumberNumberCompositeSearchParamTableTypeRowGenerator.GenerateRows(input));
            }
        }

        internal struct UpsertResourceTableValuedParameters
        {
            internal UpsertResourceTableValuedParameters(global::System.Collections.Generic.IEnumerable<ResourceWriteClaimTableTypeRow> ResourceWriteClaims, global::System.Collections.Generic.IEnumerable<CompartmentAssignmentTableTypeRow> CompartmentAssignments, global::System.Collections.Generic.IEnumerable<ReferenceSearchParamTableTypeRow> ReferenceSearchParams, global::System.Collections.Generic.IEnumerable<TokenSearchParamTableTypeRow> TokenSearchParams, global::System.Collections.Generic.IEnumerable<TokenTextTableTypeRow> TokenTextSearchParams, global::System.Collections.Generic.IEnumerable<StringSearchParamTableTypeRow> StringSearchParams, global::System.Collections.Generic.IEnumerable<NumberSearchParamTableTypeRow> NumberSearchParams, global::System.Collections.Generic.IEnumerable<QuantitySearchParamTableTypeRow> QuantitySearchParams, global::System.Collections.Generic.IEnumerable<UriSearchParamTableTypeRow> UriSearchParams, global::System.Collections.Generic.IEnumerable<DateTimeSearchParamTableTypeRow> DateTimeSearchParms, global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamTableTypeRow> ReferenceTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamTableTypeRow> TokenTokenCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamTableTypeRow> TokenDateTimeCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamTableTypeRow> TokenQuantityCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamTableTypeRow> TokenStringCompositeSearchParams, global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamTableTypeRow> TokenNumberNumberCompositeSearchParams)
            {
                this.ResourceWriteClaims = ResourceWriteClaims;
                this.CompartmentAssignments = CompartmentAssignments;
                this.ReferenceSearchParams = ReferenceSearchParams;
                this.TokenSearchParams = TokenSearchParams;
                this.TokenTextSearchParams = TokenTextSearchParams;
                this.StringSearchParams = StringSearchParams;
                this.NumberSearchParams = NumberSearchParams;
                this.QuantitySearchParams = QuantitySearchParams;
                this.UriSearchParams = UriSearchParams;
                this.DateTimeSearchParms = DateTimeSearchParms;
                this.ReferenceTokenCompositeSearchParams = ReferenceTokenCompositeSearchParams;
                this.TokenTokenCompositeSearchParams = TokenTokenCompositeSearchParams;
                this.TokenDateTimeCompositeSearchParams = TokenDateTimeCompositeSearchParams;
                this.TokenQuantityCompositeSearchParams = TokenQuantityCompositeSearchParams;
                this.TokenStringCompositeSearchParams = TokenStringCompositeSearchParams;
                this.TokenNumberNumberCompositeSearchParams = TokenNumberNumberCompositeSearchParams;
            }

            internal global::System.Collections.Generic.IEnumerable<ResourceWriteClaimTableTypeRow> ResourceWriteClaims
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<CompartmentAssignmentTableTypeRow> CompartmentAssignments
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<ReferenceSearchParamTableTypeRow> ReferenceSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<TokenSearchParamTableTypeRow> TokenSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<TokenTextTableTypeRow> TokenTextSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<StringSearchParamTableTypeRow> StringSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<NumberSearchParamTableTypeRow> NumberSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<QuantitySearchParamTableTypeRow> QuantitySearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<UriSearchParamTableTypeRow> UriSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<DateTimeSearchParamTableTypeRow> DateTimeSearchParms
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<ReferenceTokenCompositeSearchParamTableTypeRow> ReferenceTokenCompositeSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<TokenTokenCompositeSearchParamTableTypeRow> TokenTokenCompositeSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<TokenDateTimeCompositeSearchParamTableTypeRow> TokenDateTimeCompositeSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<TokenQuantityCompositeSearchParamTableTypeRow> TokenQuantityCompositeSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<TokenStringCompositeSearchParamTableTypeRow> TokenStringCompositeSearchParams
            {
                get;
            }

            internal global::System.Collections.Generic.IEnumerable<TokenNumberNumberCompositeSearchParamTableTypeRow> TokenNumberNumberCompositeSearchParams
            {
                get;
            }
        }

        internal class UpsertSchemaVersionProcedure : StoredProcedure
        {
            internal UpsertSchemaVersionProcedure(): base("dbo.UpsertSchemaVersion")
            {
            }

            private readonly ParameterDefinition<System.Int32> _version = new ParameterDefinition<System.Int32>("@version", global::System.Data.SqlDbType.Int, false);
            private readonly ParameterDefinition<System.String> _status = new ParameterDefinition<System.String>("@status", global::System.Data.SqlDbType.VarChar, false, 10);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.Int32 version, System.String status)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dbo.UpsertSchemaVersion";
                _version.AddParameter(command.Parameters, version);
                _status.AddParameter(command.Parameters, status);
            }
        }

        private class CompartmentAssignmentTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<CompartmentAssignmentTableTypeRow>
        {
            internal CompartmentAssignmentTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.CompartmentAssignmentTableType_1")
            {
            }

            internal readonly TinyIntColumn CompartmentTypeId = new TinyIntColumn("CompartmentTypeId");
            internal readonly VarCharColumn ReferenceResourceId = new VarCharColumn("ReferenceResourceId", 64, "Latin1_General_100_CS_AS");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{CompartmentTypeId, ReferenceResourceId};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, CompartmentAssignmentTableTypeRow rowData)
            {
                CompartmentTypeId.Set(record, 0, rowData.CompartmentTypeId);
                ReferenceResourceId.Set(record, 1, rowData.ReferenceResourceId);
            }
        }

        internal struct CompartmentAssignmentTableTypeRow
        {
            internal CompartmentAssignmentTableTypeRow(System.Byte CompartmentTypeId, System.String ReferenceResourceId)
            {
                this.CompartmentTypeId = CompartmentTypeId;
                this.ReferenceResourceId = ReferenceResourceId;
            }

            internal System.Byte CompartmentTypeId
            {
                get;
            }

            internal System.String ReferenceResourceId
            {
                get;
            }
        }

        private class DateTimeSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<DateTimeSearchParamTableTypeRow>
        {
            internal DateTimeSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.DateTimeSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly DateTimeOffsetColumn StartDateTime = new DateTimeOffsetColumn("StartDateTime", 7);
            internal readonly DateTimeOffsetColumn EndDateTime = new DateTimeOffsetColumn("EndDateTime", 7);
            internal readonly BitColumn IsLongerThanADay = new BitColumn("IsLongerThanADay");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, StartDateTime, EndDateTime, IsLongerThanADay};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, DateTimeSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                StartDateTime.Set(record, 1, rowData.StartDateTime);
                EndDateTime.Set(record, 2, rowData.EndDateTime);
                IsLongerThanADay.Set(record, 3, rowData.IsLongerThanADay);
            }
        }

        internal struct DateTimeSearchParamTableTypeRow
        {
            internal DateTimeSearchParamTableTypeRow(System.Int16 SearchParamId, System.DateTimeOffset StartDateTime, System.DateTimeOffset EndDateTime, System.Boolean IsLongerThanADay)
            {
                this.SearchParamId = SearchParamId;
                this.StartDateTime = StartDateTime;
                this.EndDateTime = EndDateTime;
                this.IsLongerThanADay = IsLongerThanADay;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.DateTimeOffset StartDateTime
            {
                get;
            }

            internal System.DateTimeOffset EndDateTime
            {
                get;
            }

            internal System.Boolean IsLongerThanADay
            {
                get;
            }
        }

        private class NumberSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<NumberSearchParamTableTypeRow>
        {
            internal NumberSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.NumberSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableDecimalColumn SingleValue = new NullableDecimalColumn("SingleValue", 18, 6);
            internal readonly NullableDecimalColumn LowValue = new NullableDecimalColumn("LowValue", 18, 6);
            internal readonly NullableDecimalColumn HighValue = new NullableDecimalColumn("HighValue", 18, 6);
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, SingleValue, LowValue, HighValue};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, NumberSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                SingleValue.Set(record, 1, rowData.SingleValue);
                LowValue.Set(record, 2, rowData.LowValue);
                HighValue.Set(record, 3, rowData.HighValue);
            }
        }

        internal struct NumberSearchParamTableTypeRow
        {
            internal NumberSearchParamTableTypeRow(System.Int16 SearchParamId, System.Nullable<System.Decimal> SingleValue, System.Nullable<System.Decimal> LowValue, System.Nullable<System.Decimal> HighValue)
            {
                this.SearchParamId = SearchParamId;
                this.SingleValue = SingleValue;
                this.LowValue = LowValue;
                this.HighValue = HighValue;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.Nullable<System.Decimal> SingleValue
            {
                get;
            }

            internal System.Nullable<System.Decimal> LowValue
            {
                get;
            }

            internal System.Nullable<System.Decimal> HighValue
            {
                get;
            }
        }

        private class QuantitySearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<QuantitySearchParamTableTypeRow>
        {
            internal QuantitySearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.QuantitySearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId = new NullableIntColumn("SystemId");
            internal readonly NullableIntColumn QuantityCodeId = new NullableIntColumn("QuantityCodeId");
            internal readonly NullableDecimalColumn SingleValue = new NullableDecimalColumn("SingleValue", 18, 6);
            internal readonly NullableDecimalColumn LowValue = new NullableDecimalColumn("LowValue", 18, 6);
            internal readonly NullableDecimalColumn HighValue = new NullableDecimalColumn("HighValue", 18, 6);
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, SystemId, QuantityCodeId, SingleValue, LowValue, HighValue};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, QuantitySearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                SystemId.Set(record, 1, rowData.SystemId);
                QuantityCodeId.Set(record, 2, rowData.QuantityCodeId);
                SingleValue.Set(record, 3, rowData.SingleValue);
                LowValue.Set(record, 4, rowData.LowValue);
                HighValue.Set(record, 5, rowData.HighValue);
            }
        }

        internal struct QuantitySearchParamTableTypeRow
        {
            internal QuantitySearchParamTableTypeRow(System.Int16 SearchParamId, System.Nullable<System.Int32> SystemId, System.Nullable<System.Int32> QuantityCodeId, System.Nullable<System.Decimal> SingleValue, System.Nullable<System.Decimal> LowValue, System.Nullable<System.Decimal> HighValue)
            {
                this.SearchParamId = SearchParamId;
                this.SystemId = SystemId;
                this.QuantityCodeId = QuantityCodeId;
                this.SingleValue = SingleValue;
                this.LowValue = LowValue;
                this.HighValue = HighValue;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId
            {
                get;
            }

            internal System.Nullable<System.Int32> QuantityCodeId
            {
                get;
            }

            internal System.Nullable<System.Decimal> SingleValue
            {
                get;
            }

            internal System.Nullable<System.Decimal> LowValue
            {
                get;
            }

            internal System.Nullable<System.Decimal> HighValue
            {
                get;
            }
        }

        private class ReferenceSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<ReferenceSearchParamTableTypeRow>
        {
            internal ReferenceSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.ReferenceSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableVarCharColumn BaseUri = new NullableVarCharColumn("BaseUri", 128, "Latin1_General_100_CS_AS");
            internal readonly SmallIntColumn ReferenceResourceTypeId = new SmallIntColumn("ReferenceResourceTypeId");
            internal readonly VarCharColumn ReferenceResourceId = new VarCharColumn("ReferenceResourceId", 64, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn ReferenceResourceVersion = new NullableIntColumn("ReferenceResourceVersion");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, BaseUri, ReferenceResourceTypeId, ReferenceResourceId, ReferenceResourceVersion};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, ReferenceSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                BaseUri.Set(record, 1, rowData.BaseUri);
                ReferenceResourceTypeId.Set(record, 2, rowData.ReferenceResourceTypeId);
                ReferenceResourceId.Set(record, 3, rowData.ReferenceResourceId);
                ReferenceResourceVersion.Set(record, 4, rowData.ReferenceResourceVersion);
            }
        }

        internal struct ReferenceSearchParamTableTypeRow
        {
            internal ReferenceSearchParamTableTypeRow(System.Int16 SearchParamId, System.String BaseUri, System.Int16 ReferenceResourceTypeId, System.String ReferenceResourceId, System.Nullable<System.Int32> ReferenceResourceVersion)
            {
                this.SearchParamId = SearchParamId;
                this.BaseUri = BaseUri;
                this.ReferenceResourceTypeId = ReferenceResourceTypeId;
                this.ReferenceResourceId = ReferenceResourceId;
                this.ReferenceResourceVersion = ReferenceResourceVersion;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.String BaseUri
            {
                get;
            }

            internal System.Int16 ReferenceResourceTypeId
            {
                get;
            }

            internal System.String ReferenceResourceId
            {
                get;
            }

            internal System.Nullable<System.Int32> ReferenceResourceVersion
            {
                get;
            }
        }

        private class ReferenceTokenCompositeSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<ReferenceTokenCompositeSearchParamTableTypeRow>
        {
            internal ReferenceTokenCompositeSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.ReferenceTokenCompositeSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableVarCharColumn BaseUri1 = new NullableVarCharColumn("BaseUri1", 128, "Latin1_General_100_CS_AS");
            internal readonly SmallIntColumn ReferenceResourceTypeId1 = new SmallIntColumn("ReferenceResourceTypeId1");
            internal readonly VarCharColumn ReferenceResourceId1 = new VarCharColumn("ReferenceResourceId1", 64, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn ReferenceResourceVersion1 = new NullableIntColumn("ReferenceResourceVersion1");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly VarCharColumn Code2 = new VarCharColumn("Code2", 128, "Latin1_General_100_CS_AS");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, BaseUri1, ReferenceResourceTypeId1, ReferenceResourceId1, ReferenceResourceVersion1, SystemId2, Code2};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, ReferenceTokenCompositeSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                BaseUri1.Set(record, 1, rowData.BaseUri1);
                ReferenceResourceTypeId1.Set(record, 2, rowData.ReferenceResourceTypeId1);
                ReferenceResourceId1.Set(record, 3, rowData.ReferenceResourceId1);
                ReferenceResourceVersion1.Set(record, 4, rowData.ReferenceResourceVersion1);
                SystemId2.Set(record, 5, rowData.SystemId2);
                Code2.Set(record, 6, rowData.Code2);
            }
        }

        internal struct ReferenceTokenCompositeSearchParamTableTypeRow
        {
            internal ReferenceTokenCompositeSearchParamTableTypeRow(System.Int16 SearchParamId, System.String BaseUri1, System.Int16 ReferenceResourceTypeId1, System.String ReferenceResourceId1, System.Nullable<System.Int32> ReferenceResourceVersion1, System.Nullable<System.Int32> SystemId2, System.String Code2)
            {
                this.SearchParamId = SearchParamId;
                this.BaseUri1 = BaseUri1;
                this.ReferenceResourceTypeId1 = ReferenceResourceTypeId1;
                this.ReferenceResourceId1 = ReferenceResourceId1;
                this.ReferenceResourceVersion1 = ReferenceResourceVersion1;
                this.SystemId2 = SystemId2;
                this.Code2 = Code2;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.String BaseUri1
            {
                get;
            }

            internal System.Int16 ReferenceResourceTypeId1
            {
                get;
            }

            internal System.String ReferenceResourceId1
            {
                get;
            }

            internal System.Nullable<System.Int32> ReferenceResourceVersion1
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId2
            {
                get;
            }

            internal System.String Code2
            {
                get;
            }
        }

        private class ResourceWriteClaimTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<ResourceWriteClaimTableTypeRow>
        {
            internal ResourceWriteClaimTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.ResourceWriteClaimTableType_1")
            {
            }

            internal readonly TinyIntColumn ClaimTypeId = new TinyIntColumn("ClaimTypeId");
            internal readonly NVarCharColumn ClaimValue = new NVarCharColumn("ClaimValue", 128);
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{ClaimTypeId, ClaimValue};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, ResourceWriteClaimTableTypeRow rowData)
            {
                ClaimTypeId.Set(record, 0, rowData.ClaimTypeId);
                ClaimValue.Set(record, 1, rowData.ClaimValue);
            }
        }

        internal struct ResourceWriteClaimTableTypeRow
        {
            internal ResourceWriteClaimTableTypeRow(System.Byte ClaimTypeId, System.String ClaimValue)
            {
                this.ClaimTypeId = ClaimTypeId;
                this.ClaimValue = ClaimValue;
            }

            internal System.Byte ClaimTypeId
            {
                get;
            }

            internal System.String ClaimValue
            {
                get;
            }
        }

        private class StringSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<StringSearchParamTableTypeRow>
        {
            internal StringSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.StringSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NVarCharColumn Text = new NVarCharColumn("Text", 256, "Latin1_General_100_CI_AI_SC");
            internal readonly NullableNVarCharColumn TextOverflow = new NullableNVarCharColumn("TextOverflow", -1, "Latin1_General_100_CI_AI_SC");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, Text, TextOverflow};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, StringSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                Text.Set(record, 1, rowData.Text);
                TextOverflow.Set(record, 2, rowData.TextOverflow);
            }
        }

        internal struct StringSearchParamTableTypeRow
        {
            internal StringSearchParamTableTypeRow(System.Int16 SearchParamId, System.String Text, System.String TextOverflow)
            {
                this.SearchParamId = SearchParamId;
                this.Text = Text;
                this.TextOverflow = TextOverflow;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.String Text
            {
                get;
            }

            internal System.String TextOverflow
            {
                get;
            }
        }

        private class TokenDateTimeCompositeSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<TokenDateTimeCompositeSearchParamTableTypeRow>
        {
            internal TokenDateTimeCompositeSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.TokenDateTimeCompositeSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly DateTimeOffsetColumn StartDateTime2 = new DateTimeOffsetColumn("StartDateTime2", 7);
            internal readonly DateTimeOffsetColumn EndDateTime2 = new DateTimeOffsetColumn("EndDateTime2", 7);
            internal readonly BitColumn IsLongerThanADay2 = new BitColumn("IsLongerThanADay2");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, SystemId1, Code1, StartDateTime2, EndDateTime2, IsLongerThanADay2};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, TokenDateTimeCompositeSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                SystemId1.Set(record, 1, rowData.SystemId1);
                Code1.Set(record, 2, rowData.Code1);
                StartDateTime2.Set(record, 3, rowData.StartDateTime2);
                EndDateTime2.Set(record, 4, rowData.EndDateTime2);
                IsLongerThanADay2.Set(record, 5, rowData.IsLongerThanADay2);
            }
        }

        internal struct TokenDateTimeCompositeSearchParamTableTypeRow
        {
            internal TokenDateTimeCompositeSearchParamTableTypeRow(System.Int16 SearchParamId, System.Nullable<System.Int32> SystemId1, System.String Code1, System.DateTimeOffset StartDateTime2, System.DateTimeOffset EndDateTime2, System.Boolean IsLongerThanADay2)
            {
                this.SearchParamId = SearchParamId;
                this.SystemId1 = SystemId1;
                this.Code1 = Code1;
                this.StartDateTime2 = StartDateTime2;
                this.EndDateTime2 = EndDateTime2;
                this.IsLongerThanADay2 = IsLongerThanADay2;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId1
            {
                get;
            }

            internal System.String Code1
            {
                get;
            }

            internal System.DateTimeOffset StartDateTime2
            {
                get;
            }

            internal System.DateTimeOffset EndDateTime2
            {
                get;
            }

            internal System.Boolean IsLongerThanADay2
            {
                get;
            }
        }

        private class TokenNumberNumberCompositeSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<TokenNumberNumberCompositeSearchParamTableTypeRow>
        {
            internal TokenNumberNumberCompositeSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.TokenNumberNumberCompositeSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableDecimalColumn SingleValue2 = new NullableDecimalColumn("SingleValue2", 18, 6);
            internal readonly NullableDecimalColumn LowValue2 = new NullableDecimalColumn("LowValue2", 18, 6);
            internal readonly NullableDecimalColumn HighValue2 = new NullableDecimalColumn("HighValue2", 18, 6);
            internal readonly NullableDecimalColumn SingleValue3 = new NullableDecimalColumn("SingleValue3", 18, 6);
            internal readonly NullableDecimalColumn LowValue3 = new NullableDecimalColumn("LowValue3", 18, 6);
            internal readonly NullableDecimalColumn HighValue3 = new NullableDecimalColumn("HighValue3", 18, 6);
            internal readonly BitColumn HasRange = new BitColumn("HasRange");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, SystemId1, Code1, SingleValue2, LowValue2, HighValue2, SingleValue3, LowValue3, HighValue3, HasRange};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, TokenNumberNumberCompositeSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                SystemId1.Set(record, 1, rowData.SystemId1);
                Code1.Set(record, 2, rowData.Code1);
                SingleValue2.Set(record, 3, rowData.SingleValue2);
                LowValue2.Set(record, 4, rowData.LowValue2);
                HighValue2.Set(record, 5, rowData.HighValue2);
                SingleValue3.Set(record, 6, rowData.SingleValue3);
                LowValue3.Set(record, 7, rowData.LowValue3);
                HighValue3.Set(record, 8, rowData.HighValue3);
                HasRange.Set(record, 9, rowData.HasRange);
            }
        }

        internal struct TokenNumberNumberCompositeSearchParamTableTypeRow
        {
            internal TokenNumberNumberCompositeSearchParamTableTypeRow(System.Int16 SearchParamId, System.Nullable<System.Int32> SystemId1, System.String Code1, System.Nullable<System.Decimal> SingleValue2, System.Nullable<System.Decimal> LowValue2, System.Nullable<System.Decimal> HighValue2, System.Nullable<System.Decimal> SingleValue3, System.Nullable<System.Decimal> LowValue3, System.Nullable<System.Decimal> HighValue3, System.Boolean HasRange)
            {
                this.SearchParamId = SearchParamId;
                this.SystemId1 = SystemId1;
                this.Code1 = Code1;
                this.SingleValue2 = SingleValue2;
                this.LowValue2 = LowValue2;
                this.HighValue2 = HighValue2;
                this.SingleValue3 = SingleValue3;
                this.LowValue3 = LowValue3;
                this.HighValue3 = HighValue3;
                this.HasRange = HasRange;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId1
            {
                get;
            }

            internal System.String Code1
            {
                get;
            }

            internal System.Nullable<System.Decimal> SingleValue2
            {
                get;
            }

            internal System.Nullable<System.Decimal> LowValue2
            {
                get;
            }

            internal System.Nullable<System.Decimal> HighValue2
            {
                get;
            }

            internal System.Nullable<System.Decimal> SingleValue3
            {
                get;
            }

            internal System.Nullable<System.Decimal> LowValue3
            {
                get;
            }

            internal System.Nullable<System.Decimal> HighValue3
            {
                get;
            }

            internal System.Boolean HasRange
            {
                get;
            }
        }

        private class TokenQuantityCompositeSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<TokenQuantityCompositeSearchParamTableTypeRow>
        {
            internal TokenQuantityCompositeSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.TokenQuantityCompositeSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly NullableIntColumn QuantityCodeId2 = new NullableIntColumn("QuantityCodeId2");
            internal readonly NullableDecimalColumn SingleValue2 = new NullableDecimalColumn("SingleValue2", 18, 6);
            internal readonly NullableDecimalColumn LowValue2 = new NullableDecimalColumn("LowValue2", 18, 6);
            internal readonly NullableDecimalColumn HighValue2 = new NullableDecimalColumn("HighValue2", 18, 6);
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, SystemId1, Code1, SystemId2, QuantityCodeId2, SingleValue2, LowValue2, HighValue2};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, TokenQuantityCompositeSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                SystemId1.Set(record, 1, rowData.SystemId1);
                Code1.Set(record, 2, rowData.Code1);
                SystemId2.Set(record, 3, rowData.SystemId2);
                QuantityCodeId2.Set(record, 4, rowData.QuantityCodeId2);
                SingleValue2.Set(record, 5, rowData.SingleValue2);
                LowValue2.Set(record, 6, rowData.LowValue2);
                HighValue2.Set(record, 7, rowData.HighValue2);
            }
        }

        internal struct TokenQuantityCompositeSearchParamTableTypeRow
        {
            internal TokenQuantityCompositeSearchParamTableTypeRow(System.Int16 SearchParamId, System.Nullable<System.Int32> SystemId1, System.String Code1, System.Nullable<System.Int32> SystemId2, System.Nullable<System.Int32> QuantityCodeId2, System.Nullable<System.Decimal> SingleValue2, System.Nullable<System.Decimal> LowValue2, System.Nullable<System.Decimal> HighValue2)
            {
                this.SearchParamId = SearchParamId;
                this.SystemId1 = SystemId1;
                this.Code1 = Code1;
                this.SystemId2 = SystemId2;
                this.QuantityCodeId2 = QuantityCodeId2;
                this.SingleValue2 = SingleValue2;
                this.LowValue2 = LowValue2;
                this.HighValue2 = HighValue2;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId1
            {
                get;
            }

            internal System.String Code1
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId2
            {
                get;
            }

            internal System.Nullable<System.Int32> QuantityCodeId2
            {
                get;
            }

            internal System.Nullable<System.Decimal> SingleValue2
            {
                get;
            }

            internal System.Nullable<System.Decimal> LowValue2
            {
                get;
            }

            internal System.Nullable<System.Decimal> HighValue2
            {
                get;
            }
        }

        private class TokenSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<TokenSearchParamTableTypeRow>
        {
            internal TokenSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.TokenSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId = new NullableIntColumn("SystemId");
            internal readonly VarCharColumn Code = new VarCharColumn("Code", 128, "Latin1_General_100_CS_AS");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, SystemId, Code};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, TokenSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                SystemId.Set(record, 1, rowData.SystemId);
                Code.Set(record, 2, rowData.Code);
            }
        }

        internal struct TokenSearchParamTableTypeRow
        {
            internal TokenSearchParamTableTypeRow(System.Int16 SearchParamId, System.Nullable<System.Int32> SystemId, System.String Code)
            {
                this.SearchParamId = SearchParamId;
                this.SystemId = SystemId;
                this.Code = Code;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId
            {
                get;
            }

            internal System.String Code
            {
                get;
            }
        }

        private class TokenStringCompositeSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<TokenStringCompositeSearchParamTableTypeRow>
        {
            internal TokenStringCompositeSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.TokenStringCompositeSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly NVarCharColumn Text2 = new NVarCharColumn("Text2", 256, "Latin1_General_100_CI_AI_SC");
            internal readonly NullableNVarCharColumn TextOverflow2 = new NullableNVarCharColumn("TextOverflow2", -1, "Latin1_General_100_CI_AI_SC");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, SystemId1, Code1, Text2, TextOverflow2};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, TokenStringCompositeSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                SystemId1.Set(record, 1, rowData.SystemId1);
                Code1.Set(record, 2, rowData.Code1);
                Text2.Set(record, 3, rowData.Text2);
                TextOverflow2.Set(record, 4, rowData.TextOverflow2);
            }
        }

        internal struct TokenStringCompositeSearchParamTableTypeRow
        {
            internal TokenStringCompositeSearchParamTableTypeRow(System.Int16 SearchParamId, System.Nullable<System.Int32> SystemId1, System.String Code1, System.String Text2, System.String TextOverflow2)
            {
                this.SearchParamId = SearchParamId;
                this.SystemId1 = SystemId1;
                this.Code1 = Code1;
                this.Text2 = Text2;
                this.TextOverflow2 = TextOverflow2;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId1
            {
                get;
            }

            internal System.String Code1
            {
                get;
            }

            internal System.String Text2
            {
                get;
            }

            internal System.String TextOverflow2
            {
                get;
            }
        }

        private class TokenTextTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<TokenTextTableTypeRow>
        {
            internal TokenTextTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.TokenTextTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NVarCharColumn Text = new NVarCharColumn("Text", 400, "Latin1_General_CI_AI");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, Text};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, TokenTextTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                Text.Set(record, 1, rowData.Text);
            }
        }

        internal struct TokenTextTableTypeRow
        {
            internal TokenTextTableTypeRow(System.Int16 SearchParamId, System.String Text)
            {
                this.SearchParamId = SearchParamId;
                this.Text = Text;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.String Text
            {
                get;
            }
        }

        private class TokenTokenCompositeSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<TokenTokenCompositeSearchParamTableTypeRow>
        {
            internal TokenTokenCompositeSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.TokenTokenCompositeSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly NullableIntColumn SystemId1 = new NullableIntColumn("SystemId1");
            internal readonly VarCharColumn Code1 = new VarCharColumn("Code1", 128, "Latin1_General_100_CS_AS");
            internal readonly NullableIntColumn SystemId2 = new NullableIntColumn("SystemId2");
            internal readonly VarCharColumn Code2 = new VarCharColumn("Code2", 128, "Latin1_General_100_CS_AS");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, SystemId1, Code1, SystemId2, Code2};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, TokenTokenCompositeSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                SystemId1.Set(record, 1, rowData.SystemId1);
                Code1.Set(record, 2, rowData.Code1);
                SystemId2.Set(record, 3, rowData.SystemId2);
                Code2.Set(record, 4, rowData.Code2);
            }
        }

        internal struct TokenTokenCompositeSearchParamTableTypeRow
        {
            internal TokenTokenCompositeSearchParamTableTypeRow(System.Int16 SearchParamId, System.Nullable<System.Int32> SystemId1, System.String Code1, System.Nullable<System.Int32> SystemId2, System.String Code2)
            {
                this.SearchParamId = SearchParamId;
                this.SystemId1 = SystemId1;
                this.Code1 = Code1;
                this.SystemId2 = SystemId2;
                this.Code2 = Code2;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId1
            {
                get;
            }

            internal System.String Code1
            {
                get;
            }

            internal System.Nullable<System.Int32> SystemId2
            {
                get;
            }

            internal System.String Code2
            {
                get;
            }
        }

        private class UriSearchParamTableTypeTableValuedParameterDefinition : TableValuedParameterDefinition<UriSearchParamTableTypeRow>
        {
            internal UriSearchParamTableTypeTableValuedParameterDefinition(System.String parameterName): base(parameterName, "dbo.UriSearchParamTableType_1")
            {
            }

            internal readonly SmallIntColumn SearchParamId = new SmallIntColumn("SearchParamId");
            internal readonly VarCharColumn Uri = new VarCharColumn("Uri", 256, "Latin1_General_100_CS_AS");
            protected override global::System.Collections.Generic.IEnumerable<Column> Columns => new Column[]{SearchParamId, Uri};
            protected override void FillSqlDataRecord(global::Microsoft.SqlServer.Server.SqlDataRecord record, UriSearchParamTableTypeRow rowData)
            {
                SearchParamId.Set(record, 0, rowData.SearchParamId);
                Uri.Set(record, 1, rowData.Uri);
            }
        }

        internal struct UriSearchParamTableTypeRow
        {
            internal UriSearchParamTableTypeRow(System.Int16 SearchParamId, System.String Uri)
            {
                this.SearchParamId = SearchParamId;
                this.Uri = Uri;
            }

            internal System.Int16 SearchParamId
            {
                get;
            }

            internal System.String Uri
            {
                get;
            }
        }
    }
}