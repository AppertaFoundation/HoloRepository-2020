using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using NUnit.Framework;
using UnityEngine.TestTools;
using HoloStorageConnector;
using Microsoft.MixedReality.Toolkit.UI;

namespace Tests
{
    public class HoloStorageConnectorTest
    {
        [UnityTest]
        public IEnumerator getPatientTest()
        {
            Patient patient = new Patient();
            yield return HoloStorageClient.GetPatient(patient, "p100");

            Assert.AreEqual(patient.pid, "p100");
            Assert.AreEqual(patient.gender, "female");
            Assert.AreEqual(patient.birthDate, "1947-05-25");
            Assert.AreEqual(patient.name.full, "Rosario Aufderhar");
        }

        [UnityTest]
        public IEnumerator getMultiplePatientTest()
        {
            List<Patient> patientList = new List<Patient>();
            yield return HoloStorageClient.GetMultiplePatients(patientList, "p100,p101,nullPatient");

            Assert.AreEqual(patientList[0].pid,"p100");
            Assert.AreEqual(patientList[0].gender, "female");
            Assert.AreEqual(patientList[0].birthDate, "1947-05-25");
            Assert.AreEqual(patientList[0].name.full, "Rosario Aufderhar");

            Assert.AreEqual(patientList[1].pid, "p101");
            Assert.AreEqual(patientList[1].gender, "male");
            Assert.AreEqual(patientList[1].birthDate, "1947-06-04");
            Assert.AreEqual(patientList[1].name.full, "Buster Greenholt");

            //The response with "pid = nullPatient" from server should be empty
            Assert.AreEqual(patientList.Count, 2);
        }

        [UnityTest]
        public IEnumerator getHologramsTest()
        {
            Hologram hologram = new Hologram();
            yield return HoloStorageClient.GetHologram(hologram, "h101");

            Assert.AreEqual(hologram.hid, "h101");
            Assert.AreEqual(hologram.title, "Lungs Hologram");
            Assert.AreEqual(hologram.description, "Lungs of patient");
            Assert.AreEqual(hologram.contentType, "model/gltf-binary");
            Assert.AreEqual(hologram.fileSizeInKb, 1471);
            Assert.AreEqual(hologram.bodySite, "chest");
            Assert.AreEqual(hologram.dateOfImaging, "2017-07-15T15:20:25Z");
            Assert.AreEqual(hologram.creationDate, "2019-01-02T12:30:45Z");
            Assert.AreEqual(hologram.creationMode, "GENERATE_FROM_IMAGING_STUDY");
            Assert.AreEqual(hologram.creationDescription, "Demo of output generated by the lung segmentation pipeline");
            Assert.AreEqual(hologram.aid, "a101");
            Assert.AreEqual(hologram.pid, "p100");
        }

        [UnityTest]
        public IEnumerator getMultipleHologramsTest()
        {
            List<Hologram> hologramList = new List<Hologram>();
            yield return HoloStorageClient.GetMultipleHolograms(hologramList, "p100,p101,nullPatient", QueryType.pids);

            Assert.AreEqual(hologramList[0].hid, "h101");
            Assert.AreEqual(hologramList[0].title, "Lungs Hologram");
            Assert.AreEqual(hologramList[0].description, "Lungs of patient");
            Assert.AreEqual(hologramList[0].contentType, "model/gltf-binary");
            Assert.AreEqual(hologramList[0].fileSizeInKb, 1471);
            Assert.AreEqual(hologramList[0].bodySite, "chest");
            Assert.AreEqual(hologramList[0].dateOfImaging, "2017-07-15T15:20:25Z");
            Assert.AreEqual(hologramList[0].creationDate, "2019-01-02T12:30:45Z");
            Assert.AreEqual(hologramList[0].creationMode, "GENERATE_FROM_IMAGING_STUDY");
            Assert.AreEqual(hologramList[0].creationDescription, "Demo of output generated by the lung segmentation pipeline");
            Assert.AreEqual(hologramList[0].aid, "a101");
            Assert.AreEqual(hologramList[0].pid, "p100");

            Assert.AreEqual(hologramList[1].hid, "h100");

            //Totally 3 holograms data from server, (no response with "pid = nullPatient")
            Assert.AreEqual(hologramList.Count, 3);
        }

        [UnityTest]
        public IEnumerator getAuthorTest()
        {
            Author author = new Author();
            yield return HoloStorageClient.GetAuthor(author, "a100");

            Assert.AreEqual(author.aid, "a100");
            Assert.AreEqual(author.name.full, "Maudie Kirlin");
        }

        [UnityTest]
        public IEnumerator getMultipleAuthorTest()
        {
            List<Author> authorList = new List<Author>();
            yield return HoloStorageClient.GetMultipleAuthors(authorList, "a100,a101,nullAuthor");

            Assert.AreEqual(authorList[0].aid, "a100");
            Assert.AreEqual(authorList[0].name.full, "Maudie Kirlin");

            Assert.AreEqual(authorList[1].aid, "a101");
            Assert.AreEqual(authorList[1].name.full, "Erlinda Franecki");

            //The response from server with "aid = nullAuthor" should be empty
            Assert.AreEqual(authorList.Count, 2);
        }

        [UnityTest]
        public IEnumerator HologramInstantiationSettingsTest()
        {
            GameObject testObject = new GameObject();
            GameObject testObjectChild = GameObject.CreatePrimitive(PrimitiveType.Capsule);
            testObjectChild.transform.parent = testObject.transform;

            HologramInstantiationSettings setting = new HologramInstantiationSettings
            {
                Name = "TestObject",
                Manipulable = false,
                Rotation = new Vector3(0, 180, 0),
                Position = new Vector3(1f, 2f, 3f),
                Size = 0.5f
            };

            HologramInstantiationSettings.Initialize(testObject, setting);

            Assert.AreEqual(testObject.name, "TestObject");
            Assert.AreEqual(testObject.transform.localScale, new Vector3(0.25f, 0.25f, 0.25f));
            Assert.AreEqual(testObject.transform.position, new Vector3(1f, 2f, 3f));
            Assert.AreEqual(testObject.transform.eulerAngles, new Vector3(0, 180, 0));
            Assert.AreEqual(testObject.GetComponent<BoundingBox>(), null);
            Assert.AreEqual(testObject.GetComponent<ManipulationHandler>(), null);

            yield return null;
        }
    }
}
